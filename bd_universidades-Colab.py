# -*- coding: utf-8 -*-
"""BD_Universidades.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AIsrFW_MgxmpNJRO7cKXPUbEH5PlMC52

Corporación Universitaria Iberoamericana

Eder Steel Pinzón Mateus

Epinzon3@ibero.edu.co

ID: 100127883

Analítica de datos

JOAQUIN SANCHEZ

28/09/2024

**Introducción**

El uso de Google Colab le permite procesar grandes cantidades de datos sin consumir los recursos de su computadora. Al proporcionar datos de cualquier fuente, se pueden analizar y crear Data frames utilizando Python y bibliotecas existentes.

La visualización de datos es importante para el análisis y la comunicación de la infoemacion. Para Python, Matplotlib y Seaborn son las bibliotecas de creación de gráficos más utilizadas. Matplotlib proporciona una gran flexibilidad para controlar la visualización, lo que le permite crear una variedad de gráficos, desde gráficos de barras hasta gráficos circulares. Por otro lado, Seaborn, construido sobre Matplotlib, facilita la creación de gráficos estadísticos y proporciona una interfaz intuitiva que facilita la creación de visualizaciones complejas.

Utilizando estas herramientas juntas, los analistas pueden identificar patrones, relaciones y anomalías. Esto no sólo proporciona una comprensión más profunda de los datos, sino que también ayuda en la toma de decisiones. La capacidad de planificar y visualizar opciones garantiza que los resultados del análisis sean claros y atractivos para su todos, lo que mejora la comunicación de los resultados.
"""

# Seleccionar archivo y subir la base de datos BD_Universidades.sql A Google colab

from google.colab import files

uploaded = files.upload()

# Abre el archivo BD_Universidades.sql y lee las primeras 20 líneas
with open('Universidad.sql', 'r') as file:
    for i in range(20):
        line = file.readline()
        print(line.strip())  # .strip() elimina los espacios en blanco y los saltos de línea

# Instalar bibliotecas matplot lib y seaborn
!pip install matplotlib seaborn

# llamar las librerias
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Lee el archivo BD_Universidades.sql y extraer las primera línea
data = []

with open('Universidad.sql', 'r') as file:
    for line in file:
# Elimina saltos de línea y comillas y luego divide por comas
        values = line.strip().strip('"').split('","')
        data.append([value.strip('"') for value in values])

# Imprimir y verificar la estructura los datos
print(data[:3])

# Crear un DataFrame de Pandas con las columnas según la tabla

column_names = [
    "AÑO", "GENERO", "GRADO", "GRUPO", "FECHA_NACIMIENTO",
    "EDAD", "NIVEL", "CATEGORIA", "UNIDAD_ACADÉMICA",
    "SEDE", "PROGRAMA_EDUCATIVO", "NACIONALIDAD", "ESTADO", "ALUMNOS"
]

# Crear el DataFrame a partir de la lista de datos
df = pd.DataFrame(data, columns=column_names)

# Limpieza de datos
for column in ['AÑO', 'EDAD', 'ALUMNOS']:
    df[column] = pd.to_numeric(df[column], errors='coerce')

# Verifica el DataFrame
print(df.head())  # Mostrar las primeras 5 filas del DataFrame

"""**VISUALIZACION DE LOS DATOS CON LA LIBRERIA SEABORN**"""

# Configurar el estilo de Seaborn
sns.set(style="whitegrid")

# Gráfico 1: Distribución del AÑO
#Este gráfico de barras muestra la cantidad de estudiantes en cada año académico.
#Se puede observar cómo varía el número de estudiantes a lo largo de los años.
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='AÑO', palette='viridis')
plt.title('Distribución de Años')
plt.xlabel('Año')
plt.ylabel('Cantidad de Estudiantes')
plt.xticks(rotation=45)
plt.show()

# Gráfico 2: Distribución del Género
#Este gráfico de barras muestra la cantidad de estudiantes por género.
#se puede analizar la representación de género en la institución y validar la inclusion
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='GENERO', palette='pastel')
plt.title('Distribución del Género')
plt.xlabel('Género')
plt.ylabel('Cantidad de Estudiantes')
plt.show()

# Gráfico 3: Grado por Nivel de Educación
# Se desglosa la cantidad de estudiantes por nivel de educación y grado.
# Da la capacidad de distinguir entre los distintos grados dentro de cada nivel educativo permite entender mejor la composición del cuerpo estudiantil.
plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='NIVEL', hue='GRADO', palette='Set2')
plt.title('Número de Estudiantes por Nivel y Grado')
plt.xlabel('Nivel de Educación')
plt.ylabel('Cantidad de Estudiantes')
plt.legend(title='Grado', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)
plt.show()

# Gráfico 4: Gráfico de cajas de Edad por Nivel
# Este boxplot ilustra la distribución de las edades de los estudiantes según el nivel de educación.
# permite observar la mediana, los cuartiles y los valores atípicos en las edades por cada nivel educativo.
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='NIVEL', y='EDAD', palette='coolwarm')
plt.title('Distribución de Edad por Nivel de Educación')
plt.xlabel('Nivel de Educación')
plt.ylabel('Edad')
plt.xticks(rotation=45)
plt.show()

# Grafico 5:Gráfico de barras de Alumnos por Programa Educativo
# Se muestra la cantidad de alumnos por programa educativo, organizados de mayor a menor.
# permite identificar qué programas educativos son más populares entre los estudiantes.
plt.figure(figsize=(10, 30))
sns.countplot(data=df, y='PROGRAMA_EDUCATIVO', order=df['PROGRAMA_EDUCATIVO'].value_counts().index, palette='muted')
plt.title('Cantidad de Alumnos por Programa Educativo')
plt.xlabel('Cantidad de Alumnos')
plt.ylabel('Programa Educativo')
plt.grid(axis='x')
plt.show()

"""**VISUALIZACION DE LOS DATOS CON LA LIBRERIA MATPLOTLIB**"""

# Grafico 1: histograma de las edades
# Se muestra la distribución de las edades de los alumnos utilizando un histograma con 20 intervalos
# La forma del histograma permite visualizar la frecuencia de las diferentes edades de los estudiantes.
plt.figure(figsize=(10, 6))
plt.hist(df['EDAD'], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribución de Edades de los Alumnos')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.grid(axis='y', alpha=0.75)
plt.show()

# Grafico 2: gráfico de barras de la cantidad de alumnos por nivel académico
# Se ilustra la cantidad de alumnos en cada nivel académico.
# La representación de los niveles académicos en barras permite identificar fácilmente cuáles son los más y menos concurridos.
plt.figure(figsize=(10, 6))  # Establecer el tamaño de la figura
df['NIVEL'].value_counts().plot(kind='bar', color='orange', edgecolor='black')
plt.title('Cantidad de Alumnos por Nivel Académico')
plt.xlabel('Nivel Académico')
plt.ylabel('Cantidad de Alumnos')
plt.xticks(rotation=45)
plt.grid(axis='y', alpha=0.75)
plt.show()

# Grafico 3: gráfico de dispersión de Edad vs AÑO
# Se relaciona las edades de los estudiantes con el año académico.
# Permite observar la relación entre la edad de los alumnos y el año en el que se matricularon.
plt.figure(figsize=(10, 6))  # Establecer el tamaño de la figura
plt.scatter(df['AÑO'], df['EDAD'], alpha=0.6, color='purple')
plt.title('Edad vs AÑO')
plt.xlabel('AÑO')
plt.ylabel('Edad')
plt.grid()
plt.show()

# Grafico 4: gráfico de pastel de la distribución de alumnos por programa educativo
# Se muestra la proporción de alumnos en diferentes programas educativos.
# Proporciona una visualización clara de la distribución de estudiantes entre los distintos programas.
plt.figure(figsize=(15, 50))  # Establecer el tamaño de la figura
df['PROGRAMA_EDUCATIVO'].value_counts().plot(kind='pie',
                                              autopct='%1.1f%%',
                                              startangle=90,
                                              colors=plt.cm.Paired.colors)
plt.title('Distribución de Alumnos por Programa Educativo')
plt.ylabel('')
plt.grid()
plt.show()

# Grafico 5: gráfico de cajas para mostrar la distribución de edades por nivel académico
# Un boxplot que representa la distribución de las edades de los estudiantes agrupadas por nivel académico.
# Permite analizar la dispersión de las edades y la presencia de valores atípicos por cada nivel académico.
plt.figure(figsize=(12, 6))
df.boxplot(column='EDAD', by='NIVEL', grid=True)
plt.title('Distribución de Edades por Nivel Académico')
plt.suptitle('')
plt.xlabel('Nivel Académico')
plt.ylabel('Edad')
plt.show()

"""**Conclusiones**

Las bibliotecas de visualización de Python, como Matplotlib y Seaborn, nos permiten mostrar diferentes partes de los datos y al mismo tiempo, proporcionan información detallada. En la base de datos Universidades, estas herramientas brindan información valiosa sobre programas académicos y estudiantes. Con una visibilidad clara y precisa, se pueden identificar rápidamente las tendencias demográficas, la popularidad de los programas educativos y la distribución de los logros educativos.

La capacidad de capturar esta importante información no solo permite una comprensión más profunda del cuerpo estudiantil, sino que también respalda la toma de decisiones estratégicas en entornos educativos y organizacionales. Comprender patrones y relaciones puede ayudar a los administradores a anticipar las necesidades de los estudiantes, ajustar los planes de estudio y optimizar la asignación de recursos. En conjunto, la combinación de estas herramientas permite una comprensión más eficiente de los datos en cualquier ambito de negocio, lo que les permite abordar de manera más efectiva los desafíos del entorno y concentrarse en tomar decisiones informadas y efectivas.
.
"""